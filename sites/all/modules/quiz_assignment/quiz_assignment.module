<?php

/**
 * Implementation of hook_help().
 **/
function quiz_assignment_help($path, $args) {
  switch ($path) {
    case 'admin/modules#description':
      return '<p>' . t('Quiz assignment question type for the quiz module.') . '</p>';
    case 'node/add#quiz_assignment':
    case 'admin/help#quiz_assignment':
      return '<p>' . t('A question type for the quiz module. Allows user to submit files as part of a quiz.') . '</p>';
    default:
      break;
  }
}

/**
 * Implementation of hook_quiz_question_info().
 */
function quiz_assignment_quiz_question_info() {
	
  return array(
    'quiz_assignment' => array(
      'name' => t('Assignment question'),
      'description' => t('Quiz questions that allows the user to submit a file as part of a quiz.'),
      'question provider' => 'QuizAssignmentQuestion',
      'response provider' => 'QuizAssignmentResponse',
      'module' => 'quiz_question', // All wrapper functions are in that module.
    ),
  );
}

/**
 * Implementation of the quiz_question hook_config
 */
function quiz_assignment_config() {
  
  $form['quiz_assignment_markup'] = array(
    '#type' => 'markup',
    '#value' => '<p>' . t('This section defines how files are upload and stored on the server.') . '</p><p>' . t("If you want files stored outside Drupals '/files/' directory, you must specify a full valid path. The path will always be prepended with '/quiz_assignment/'. So if you specify the directory '/var/drupal-content/', files will be stored in '/var/drupal-content/quiz_assignment/'. If no path is specified, Drupals internal files path will be used, ie. '[drupal_installation_root]/sites/default/files/quiz_assignment/'.") . '</p>',
  );
  
  $form['quiz_assignment_local_storage_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to local storage'),
    '#description' => t('Set valid path here if you want to store uploaded files outside of the Drupal root. If left empty, Drupals internal storage system is used.'),
    '#default_value' => variable_get('quiz_assignment_local_storage_path', NULL),
  );
  
  $form['quiz_assignment_append_quiz_node_id_to_path'] = array(
    '#type' => 'checkbox',
    '#title' => t('Separate files for each quiz'),
    '#description' => t('If checked (RECOMMENDED), files will be store inside directories name by the quiz node id.'),
    '#default_value' => variable_get('quiz_assignment_append_quiz_node_id_to_path', 1),
  );
  
  $form['quiz_assignment_keep_original_filename'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep original filenames'),
    '#description' => t('If not checked (RECOMMENDED), unique filenames will be created for each file. This will ensure that no two files has the same name.'),
    '#default_value' => variable_get('quiz_assignment_keep_original_filename', 0),
  );
  
  $form['quiz_assignment_valid_file_extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Default valid filetype extensions'),
    '#description' => t('A global comma-separated list of valid file extensions. Every extension must start with a period (.). Every quiz can override this list on an individual basis.'),
    '#default_value' => variable_get('quiz_assignment_valid_file_extensions', '.doc, .docx, .odt, .pdf'),
  );
  
  $form['#validate'] = 'quiz_assignment_config_validate';
  
  return $form;
}

function quiz_assignment_perm() {
	
  $permission = array('quiz assignment download file');
  return $permission;
}

/**
 * Implementation of hook_menu().
 */
function quiz_assignment_menu() {
	
  $items = array();
  
  $items['node/%/quiz_assignment/download/%'] = array(
    'title' => 'Download assignment',
    'page callback' => 'quiz_assignment_download',
    'page arguments' => array(1, 4),
    'description' => 'Download quiz assignment file.',
    'access arguments' => array('quiz assignment download file'),
    'menu_name' => 'quiz_assignment',
  );
  
  return $items;
}

/**
 * Handles download of uploaded files that are stored outside of Drupals 
 * storage system.
 *
 * Since the file is stored outside of the Drupal installatin root, and therefor,
 * in most cases outside of the webserver root, we need to use PHP to load the 
 * file and serve it through PHP.
 *
 * @param int $nid
 *  Quiz node id
 *
 * @param int $rid
 *  Result id for the given question answer
 */
function quiz_assignment_download($nid, $rid){
  
  // Get stored file info
  $sql = "SELECT 
            assignment.original_filename AS name, 
            assignment.filepath AS path
          FROM 
            {quiz_assignment_user_answers} assignment 
          WHERE 
            assignment.question_nid = %d 
            AND assignment.result_id = %d";
  
  $result = db_query($sql, $nid, $rid);
  $file = db_fetch_object($result);
  
  // Make headers
  $headers = array(
    'Content-Description' => 'File Transfer',
    'Content-Type' => file_get_mimetype($file->name),
    'Content-Disposition' => 'attachment; filename=' . $file->name,
    'Content-Transfer-Encoding' => 'binary',
    'Expires' => 0,
    'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
    'Pragma' => 'public',
    'Content-Length'  => filesize($file->path),
  );
  
  foreach( $headers as $header=>$value ) {
    drupal_set_header($header . ": " . $value);
  }
  
  // Serve file  
  readfile( $file->path );
  
}

/**
 * Validate the quiz assignment config form values
 */
function quiz_assignment_config_validate($form, $form_state) {
	
  // Validate that the local storage path is valid
  $path = $form_state['values']['quiz_assignment_local_storage_path'];
  if (!empty($path) && !file_check_directory($path)) {
    form_set_error('quiz_assignment_local_storage_path', t('The path could not be found or the directory is not writable.'));
  }
  
  // Get all extensions and validate them
  $extensions = split(',', trim($form_state['values']['quiz_assignment_valid_file_extensions'], ","));
  
  foreach ($extensions as $key=>$val) {
    if (preg_match(QuizAssignmentQuestion::$PATTERN_VALID_EXETENSION, trim($val)) == 0) {
      form_set_error('quiz_assignment_valid_file_extensions', 'There is an error in your extension list');
      break;
    }
  }
  
}

/**
 * Implementation of hook_autoload_info().
 */
function quiz_assignment_autoload_info() {
	
  return array(
    'QuizAssignmentQuestion' => array('file' => 'quiz_assignment.classes.inc'),
    'QuizAssignmentResponse' => array('file' => 'quiz_assignment.classes.inc'),
  );
}

/**
 * Implementation of hook_theme().
 */
function quiz_assignment_theme() {
	
  return array(
    'quiz_assignment_answering_form' => array(
      'arguments' => array(
        'form' => NULL,
      ),
      'path' => drupal_get_path('module', 'quiz_assignment') . '/theme',
      'template' => 'quiz-assignment-answering-form',
    ),
    'quiz_assignment_reponse' => array(
      'arguments' => array(
        'metadata' => array(),
        'data' => array(),
      ),
    ),
  );
}

/**
 * Theme the response part of the response report
 *
 * @param $metadata
 *  Can be used as a table header
 * @param $data
 *  Can be used as table rows
 */
function theme_quiz_assignment_response($metadata, $data) {
	
  return theme('table', $metadata, $data);
}

/**
 * Submit function for the report form
 *
 * @param $values
 *   The FAPI $form_state['values']
 */
function quiz_assignment_report_submit($values) {
	
  $score = $values['score'];
  $nid = $values['nid'];
  $vid = $values['vid'];
  $quiz = $values['quiz'];
  $rid = $values['rid'];
  
  // Quiz scoring information is spread out across three tables:
  // 1. The module should retain its own scoring information in any case where scoring is non-trivial.
  // 2. The Quiz moduleretains a limited amount of scoring information.
  // 3. The Quiz module retains an overall score for a quiz. This is the percentage score for the combination of all
  //    questions on the quiz.
  //
  // We update all three.

  // First, we update the long answer table
  db_query("UPDATE {quiz_assignment_user_answers}
            SET score = %d * (
              SELECT max_score
              FROM {quiz_question_properties}
              WHERE nid = %d
              AND vid = %d
            ) / (
              SELECT max_score
              FROM {quiz_node_relationship}
              WHERE parent_vid = %d
              AND child_vid = %d
            ), is_evaluated = 1
            WHERE question_nid = %d
            AND question_vid = %d
            AND result_id = %d",
           $score, $nid, $vid, $quiz->vid, $vid, $nid, $vid, $rid);
  $changed = db_affected_rows();

  if ($changed > 0) {
    // Second, we update the main quiz answers table

    // What do we do about the quiz_node_results_answers table? It assumes strict
    // bivalence (is_correct). I guess we consider any essay with over 50% to be correct?
    $max = db_result(db_query('SELECT max_score FROM {quiz_question_properties} WHERE vid = %d', $vid));
    if ($max <= 0) {
      $is_correct = 0;
      $points_awarded = 0;
    }
    else {
      $is_correct = $score == $max ? 1 : 0;
      $points_awarded = $score;
    }

    $sql = 'UPDATE {quiz_node_results_answers}
      SET points_awarded = %d, is_correct = %d
      WHERE question_vid = %d AND result_id = %d';
    db_query($sql, $points_awarded, $is_correct, $vid, $rid);

    // Third, we update the main quiz results table
    if ($update_total)
      quiz_update_total_score($quiz, $rid);
  }

  return $changed;
}