<?php
// $Id: content_complete.install,v 1.1.2.15 2010/01/14 10:55:30 pvhee Exp $

/**
 * @file
 * Install file for the content_complete.module
 */

/**
 * Implementation of hook_install().
 */
function content_complete_install() {
  drupal_install_schema('content_complete');
}

/**
 * Implementation of hook_schema()
 */
function content_complete_schema() {
  $schema['content_complete'] = array(
    'description' => 'Stores cached values of completeness by node.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('{node}.nid') 
      ),
      'completeness' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'description' => t('Completeness of this node.')
      ),
      'data' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => t('Data regarding node completeness')
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'completeness' => array('completeness'),
    ),
  );
  
  return $schema;
}

/**
 * Implementation of hook_uninstall().
 */
function content_complete_uninstall() {
  drupal_uninstall_schema('content_complete');
  variable_del('content_complete_hide_complete');
  
  foreach (array_keys(content_complete_get_enabled_types()) as $type) {
    variable_del('content_complete_'. $type);
    variable_del('content_complete_fields_'. $type);
  }
}

/**
 * Implementation of hook_disable().
 */
function content_complete_disable() { 
  // Clear the cache, it might not be valid anymore when the module is re-enabled.
  content_complete_clear_cache();
}

/**
 * Add an extra option to hide or show the block when the completeness has reached 100%.
 */ 	 
function content_complete_update_6001() { 	 
  variable_set('content_complete_hide_complete', TRUE); 	 
  return array();
}

/**
 * Remove the option to hide blocks, it is now stored per content type (hard-coded block),
 * or managed with views filters (no variable required).
 */ 	 
function content_complete_update_6002() {
  // Transfer all information to variables.
  $result = db_query("SELECT * FROM {content_complete} ORDER BY type");
  while ($item = db_fetch_array($result)) {
    $type = $item['type'];
    $field = $item['field_name'];
    $groups[$type][] = $field;
  }
  
  if (!empty($groups)) {  
    foreach ($groups as $type => $fields) {
      variable_set('content_complete_'. $type, 1);
      variable_set('content_complete_fields_'. $type, $fields);
    }
  }
  
  // Uninstall the previous database table
  $ret = array();
  db_drop_table($ret, 'content_complete');
  
  // Install the new one that will be used for caching
  drupal_install_schema('content_complete');
  
  drupal_set_message(t('Content Complete settings are now stored within the <a href="@types">content types</a>. All completeness values are cached and it is recommended to <a href="@cache">rebuild the cache</a>. You might also need to reconfigure your <a href="@blocks">blocks</a> and your <a href="@rules">rules</a>.', 
    array(
      '@types' => url('admin/content/types'), 
      '@cache' => url('admin/content/content_complete'), 
      '@blocks' => url('admin/build/block'), 
      '@rules' => url('rules/trigger'),
    )
  ));
  
  return $ret;
}

/**
 * Add data column to cache completeness data
 */ 	 
function content_complete_update_6003() {
  $ret = array();
  
  $field_def = array (
    'type' => 'text',
    'size' => 'big',
    'description' => t('Data regarding node completeness')
  );
  
  db_add_field($ret, 'content_complete','data',$field_def);
  
  return $ret;
}