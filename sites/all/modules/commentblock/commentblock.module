<?php
// $Id: commentblock.module,v 1.1.2.2 2009/10/09 08:23:31 ximo Exp $

/**
 * @file
 * Moves the comment form into a block and provides a default view for the
 * comment listing.
 *
 * Author:
 *   Dick Olsson (http://drupal.org/user/239911)
 *   Joakim Stai (http://drupal.org/user/88701)
 *
 * Sponsors:
 *   Senzilla (http://senzilla.com/)
 *   NodeOne (http://nodeone.se/)
 */

/**
 * Implementation of hook_menu().
 */
function commentblock_menu() {
  $items = array();
  $items['admin/settings/commentblock'] = array(
    'title' => t('Comment Block Settings'), 
    'description' => t('Configure content types to which changes are applying.'), 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('_commentblock_settings_form'),
    'access arguments' => array('administer content types'), 
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function _commentblock_settings_form() {
  $settings = array();  
  $settings['content_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Types'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('Configure content types to which changes are applying.'),
  );
  $content_types = node_get_types($op = 'types');
  $content_types_options = array();
  foreach($content_types as $content_type) {
    $content_types_options[$content_type->type] = $content_type->name;
  }
  $def_content_types_values = variable_get('commentblock_settings_content_types', NULL);
  $settings['content_types']['commentblock_settings_content_types'] = array(
    '#title' => t('Content Types'),
    '#type' => 'checkboxes',
    '#default_value' => (($def_content_types_values != NULL) ? $def_content_types_values : array()),
    '#options' => $content_types_options,
    '#description' => t('Alternative comments applying to only cheked content types. You have to specify blocks visibility to avoind double displaing of comments and comments form.'),
  );
  return system_settings_form($settings);
}

/**
 * Implementation of hook_views_api().
 */
function commentblock_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commentblock') .'/views',
  );
}

/**
 * Implementation of hook_nodeapi().
 *
 * This will make room for your custom comment view, by removing the regular
 * comment listing from the node body.
 */
function commentblock_nodeapi(&$node, $op) {
  $content_types = variable_get('commentblock_settings_content_types', NULL);
  if ($op == 'view') {
    if(!empty($content_types[$node->type]) && $content_types[$node->type] == $node->type) {
      $node->comment = NULL;
    }
  }
}

/**
 * Implementation of hook_block().
 */
function commentblock_block($op, $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks['comment_form'] = array('info' => t('Comment form'));
      return $blocks;

    case 'view':
      $block = array();
      switch ($delta) {
        case 'comment_form':
          // Only nodes dressed in page view are invited to this party.
          if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {
            $node = node_load(arg(1));

            // Only display the form if we are allowed to post comments.
            // Note that this works because this function is called before the
            // 'view' operation in hook_nodeapi().
            if (user_access('post comments') && $node->comment > 1) {
              $block['subject'] = t('Post new comment');
              $block['content'] = drupal_get_form('comment_form', array('nid' => $node->nid));
            }
          }
      }
      return $block;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function commentblock_form_alter(&$form, $form_state, $form_id) {
  // When you use a custom view for displaying comments, many options on the
  // node type settings page are irrelevant.
  if ($form_id == 'node_type_form') {
    $content_types = variable_get('commentblock_settings_content_types', NULL);
    if(!empty($content_types[$form['#node_type']->type]) && $content_types[$form['#node_type']->type] == $form['#node_type']->type) {
      $form['comment']['comment_default_mode']['#access'] = FALSE;
      $form['comment']['comment_default_order']['#access'] = FALSE;
      $form['comment']['comment_default_per_page']['#access'] = FALSE;
      $form['comment']['comment_controls']['#access'] = FALSE;
      $form['comment']['comment_form_location']['#access'] = FALSE;
    }
  }
}
