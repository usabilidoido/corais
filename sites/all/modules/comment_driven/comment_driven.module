<?php
// $Id: comment_driven.module,v 1.24 2010/04/16 15:42:33 arhak Exp $

define('COMMENT_DRIVEN__DISGUISE_PREFIX', 'cdriven-');
// these permission names should exists all the time
// even having their modules disabled,
// since they will be needed to check user_access on them
define('COMMENT_DRIVEN_IMPORT__PERM', 'import property changes');
// this constant will be available only if the module is enabled
// therefore, to test for it an approach might be
// if (module_exists('comment_driven_inspect') && user_access(COMMENT_DRIVEN_INSPECT__PERM))
// which avoids attempting an unexistent constant

module_load_include('inc', 'comment_driven', 'comment_driven.tokens');

/**
 * Implements hook_enable().
 */
function comment_driven_enable() {
  // weight above every other module
  // since after altering comment_form
  // no other module would be able to recognize its disguised elements
  db_query("UPDATE {system} SET weight = 1000 WHERE name = 'comment_driven' AND type = 'module'");
}

/**
 * Implements hook_init().
 */
function comment_driven_init() {
  // can't rely on form_alter to include JavaScript
  // since the form might get cached and pass directly to validation 
  // might check whether we are in a comment path to avoid include in it
  // but what if the form is used by another module under a different path
  $module_path = drupal_get_path('module', 'comment_driven');
  drupal_add_js($module_path . '/comment_driven.js');

  $js_setting = array(
    'comment_driven' => array(
      // global setting (not per content type)
      'node_form_bellow' => variable_get('comment_driven:node_form_bellow', 0),
      'theme_support' => variable_get('comment_driven:theme_support', 'default'),
    ),
  );
  drupal_add_js($js_setting, 'setting');
}

/**
 * Implements hook_perm().
 */
function comment_driven_perm() {
  //$perms[] = COMMENT_DRIVEN_IMPORT__PERM;
  $perms[] = comment_driven_get_perm_name('drive', 'ALL');  
  
  foreach (node_get_types() as $type) {
    if ($type->module == 'node') {
      $node_type = $type->type;
      $perms[] = comment_driven_get_perm_name('drive', $node_type);
    }
  }

  return $perms;
}

// helper function
function comment_driven_get_perm_name($action, $node_type) {
  $perm = $action . ' ' . $node_type . ' properties through comments';
  if ($node_type == 'ALL') {
    $perm .= ' (for EVERY content type!)';
  }
  return $perm;
}

/**
 * Implements hook_node_type().
 */
function comment_driven_node_type($op, $info) {
  switch ($op) {
    case 'delete':
      $driver_mod = 'comment_driven';
      $node_type = $info->type;
      driven_props_delete_settings($driver_mod, $node_type);
      break;
  }
}

/**
 * Implements hook_theme().
 */
function comment_driven_theme() {
  return array(
    'comment_driven_proxy' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

///\\\///\\\///\\\///\\\///

/**
 * Implements hook_form_alter().
 */
function comment_driven_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id != 'comment_form') {
    // not a comment form
    return; // step out
  }
  if (!empty($form['cid']['#value'])) {
    // driven properties are not editable, just available on comment creation
    return; // step out of the way
  }
  
  $nid = $form['nid']['#value'];
  $node = node_load($nid);
  $node_type = $node->type;
  if (!user_access(comment_driven_get_perm_name('drive', 'ALL')) && !(user_access(comment_driven_get_perm_name('drive', $node_type)))) {
    // has no permission
    return; // step out of the way
  }
  $driver_mod = 'comment_driven';
  //if (!driven_props_get_type_enabled($driver_mod, $node_type)) {
  //  // driven properties are disabled
  //  return; // step out of the way
  //}
  $driven_props = driven_props_get_properties($driver_mod, $node_type);
  if (empty($driven_props)) {
    // no driven properties (they might be disabled altogether)
    return; // step out of the way
  }
  if (comment_driven_is_attachments_on_comments($node_type)) {
    // @per-module-discrimination: incompatible with comment_upload [#741544-8]
    return; // step out of the way
  }
  
  // lazy load the heavier fragment of this function
  module_load_include('inc', 'comment_driven', 'comment_driven.alter');
  _comment_driven_proceed_comment_form_alter($form, $form_state);
}

function comment_driven_build_preview($form, &$form_state) {
  module_load_include('inc', 'comment_driven', 'comment_driven.alter');
  _comment_driven_build_preview($form, $form_state);
}

function comment_driven_validate($form, &$form_state) {
  module_load_include('inc', 'comment_driven', 'comment_driven.alter');
  _comment_driven_validate($form, $form_state);
}

function comment_driven_submit($form, &$form_state) {
  module_load_include('inc', 'comment_driven', 'comment_driven.alter');
  _comment_driven_submit($form, $form_state);
}

// drive properties programmatically [#741274]
// $node and $comment are faked,
// just arrays/objects following the format of $form_state['values']
// $errors is received by ref (to be retrieved by the caller)
//
// if the comment is saved but the node is not being properly updated
// try using the same faked node in a node_form to check whether they are properly set
//
// WARNING: core's behaviour does NOT check for Access Control
// CHECK wether you might actually want to use comment_driven_save_with_ac instead
// FAPI is responsible for guarding access control from posted data
// (avoiding it to reach $form_state['values'])
// but drupal_execute is receiving a manually provided $form_state['value']
// therefore, access control should be honored by the caller function (if desired)
function comment_driven_save($node, $comment, &$errors = NULL) {
  $comment = (array)$comment;
  $node = (array)$node;
  $op = array('op' => t('Save'));
  
  $comment_driven = comment_driven_disguise_form_values($comment);
  $form_state['values'] = $comment_driven + $node + $op;

  // simply delegate to core
  drupal_execute('comment_form', $form_state, $comment);
  
  $errors = form_get_errors();
  // the operation succeeded if there were no errors 
  return empty($errors);
}

// @per-module-discrimination: incompatible with comment_upload [#741544-8]
function comment_driven_is_attachments_on_comments($node_type) {
  return (module_exists('comment_upload') && variable_get('comment_upload_' . $node_type, 0));
}

function comment_driven_allow_empty_comment($node_type) {
  $driver_mod = 'comment_driven';
  $name = 'empty_comment';
  $default = 1;
  return driven_props_get_type_setting($driver_mod, $node_type, $name, $default);
}

function comment_driven_is_live_render($node_type) {
  $driver_mod = 'comment_driven';
  $name = 'live_render';
  $default = 0;
  return driven_props_get_type_setting($driver_mod, $node_type, $name, $default);
}

function _comment_driven_disguise_children($element) {
  // @TODO: every call to comment_driven_assertion_failed will be removed after alpha/beta stage 
  if (!is_array($element)) {
    comment_driven_assertion_failed('something nasty is happening somewhere: !is_array($element)');
    return;
  }
  
  // adjust #parents to match the disguised elements of comment_form
  // note that no parent would point to a level above the comment_form
  _comment_driven_disguise_adjust_parents($element);
  
  foreach (element_children($element) as $key) {
    // avoid disguising non-conflictive sub-elements
    // since we know they parent was already disguised
    // (support WYSIWYG [#747616])
    if ($element[$key]['#type'] == 'radio') {
      _comment_driven_disguise_adjust_parents($element[$key]);
      continue; // no need to recursive disguise
    }
    // protect ourself against 3rd parties creating NULL children (e.g. [#736968], [#737044])
    // lets babysit NULL children, but it has to be an array otherwise
    if (!is_null($element[$key])) {
      _comment_driven_setup_proxy_render($element[$key]);
      $element[COMMENT_DRIVEN__DISGUISE_PREFIX . $key] = _comment_driven_disguise_children($element[$key]);
    }
    // if it was NULL (above babysitting) won't hurt clearing it
    unset($element[$key]);
  }
  return $element;
}

function _comment_driven_disguise_adjust_parents(&$element) {
  // adjust #parents to match the disguised elements of comment_form
  // note that no parent would point to a level above the comment_form
  if (!empty($element['#parents'])) {
    foreach ($element['#parents'] as $index => $parent) {
      $element['#parents'][$index] = COMMENT_DRIVEN__DISGUISE_PREFIX . $parent;
    }
  }
}

function _comment_driven_setup_proxy_render(&$element) {
  $proxy_render = array(
    '#pre_render' => '_comment_driven_pre_render_proxy', 
    '#theme' => 'comment_driven_proxy', // points to theme_comment_driven_proxy
    '#post_render' => '_comment_driven_post_render_proxy',
  );
  foreach ($proxy_render as $key => $proxy) {
    if (isset($element[$key])) {
      // disguise_children supports only element_children
      // (disguise_form_values doesn't address non-children either) 
      // undisguise does support non-children as well
      // manually disguise non-children
      // @TODO: maybe it is time to have non-children support into disguise_children (?)
      $element['#' . COMMENT_DRIVEN__DISGUISE_PREFIX . $key] = $element[$key];
      $element[$key] = $proxy;
    }
  }
}

// $args not used when $key is '#theme'
function _comment_driven_proxy_render($element, $key, $args) {
  // $key is expected to be overriden by its disguised version
  // but, just in case, lets ensure we won't fall back here (unintended recursion) 
  unset($element[$key]);
  $element = _comment_driven_undisguise($element);
  if ($key === '#theme') {
    // if we got here, then #theme function/template is expected to exists
    return theme($element['#theme'], $element);
  }
  $function = $element[$key];
  // if we got here, then target function is expected to exists
  return call_user_func_array($function, $args);
}

// proxy_render
function theme_comment_driven_proxy($element) {
  $args = func_get_args(); // pass through the same arguments we got
  return _comment_driven_proxy_render($element, '#theme', $args);
}

// proxy_render
function _comment_driven_pre_render_proxy($element) {
  $args = func_get_args(); // pass through the same arguments we got
  _comment_driven_proxy_render($element, '#pre_render', $args);
}

// proxy_render
function _comment_driven_post_render_proxy($content, $element) {
  $args = func_get_args(); // pass through the same arguments we got
  _comment_driven_proxy_render($element, '#post_render', $args);
}

// helper function to drive properties programmatically [#741274] 
function comment_driven_disguise_form_values($arr) {
  // @TODO: every call to comment_driven_assertion_failed will be removed after alpha/beta stage 
  if (!is_array($arr)) comment_driven_assertion_failed('misusage of comment_driven_disguise_non_children: !is_array($arr)');
  
  $disguised = array();
  foreach ($arr as $key => $value) {
    $disguised[COMMENT_DRIVEN__DISGUISE_PREFIX . $key] = $arr[$key];
  }
  return $disguised;
}

// undisguise supports children and non-children as well
function _comment_driven_undisguise($element) {
  // reverse disguised #parents
  if (!empty($element['#parents'])) {
    foreach ($element['#parents'] as $index => $parent) {
      if (strpos($parent, COMMENT_DRIVEN__DISGUISE_PREFIX) === 0) {
        $element['#parents'][$index] = substr($parent, strlen(COMMENT_DRIVEN__DISGUISE_PREFIX));
      }
    }
  }
  
  foreach ($element as $key => $value) {
    if (is_array($element[$key])) {
      $element[$key] = _comment_driven_undisguise($element[$key]);
    }
    $pos = strpos($key, COMMENT_DRIVEN__DISGUISE_PREFIX);
    if ($pos === 0 || $pos == 1) {
      $comment_key = substr($key, $pos + strlen(COMMENT_DRIVEN__DISGUISE_PREFIX));
      $element[$comment_key] = $element[$key];
      unset($element[$key]);
    }
  }
  return $element;
}

function comment_driven_after_build($element, &$form_state) {
  // restore original comment_form ids
  // (which is only relevant from a theme support standpoint)
  _comment_driven_restore_ids($element);
  
  return $element;
}

function _comment_driven_restore_ids(&$element) {
  if (isset($element['#id'])) {
    $element['#id'] = str_replace(COMMENT_DRIVEN__DISGUISE_PREFIX, '', $element['#id']);
  }
  foreach (element_children($element) as $key) {
    _comment_driven_restore_ids($element[$key]);
  }
}

// only first level COMMENT_DRIVEN__DISGUISE_PREFIX prefixed values are desired
function _comment_driven_extract_state_values($state_values) {
  $values = array();
  foreach (array_keys($state_values) as $key) {
    if (strpos($key, COMMENT_DRIVEN__DISGUISE_PREFIX) === 0) { 
      $values[$key] = $state_values[$key];
    }
  }
  $values = _comment_driven_undisguise($values);
  return $values;
}

// helper function with obvious defaults
function comment_driven_diff_form_state($ned_form, $form_state) {
  $driver_mod = 'comment_driven';
  $node_type = $ned_form['#node']->type;
  $driven_props = driven_props_get_properties($driver_mod, $node_type);
  return driven_diff_form_state($ned_form, $form_state, $driven_props);
}

// helper function with obvious defaults
function comment_driven_assertion_failed($assertion) {
  driven_assertion_failed($assertion, 'comment_driven');
}

///\\\///\\\///\\\///\\\///

function comment_driven_load_log($cid) {
  $result = db_query('SELECT * FROM {comment_driven_log} WHERE cid = %d', $cid);
  if ($log = db_fetch_object($result)) {
    $log->changes = unserialize($log->changes);
    $log->diff_render = unserialize($log->diff_render);
  }

  // @TODO: every call to comment_driven_assertion_failed will be removed after alpha/beta stage 
  if (db_fetch_object($result) !== FALSE) comment_driven_assertion_failed('non-unique {comment_driven_log}.cid: ' . $cid);

  return $log; // FALSE if not found
}

function comment_driven_preprocess_comment(&$vars) {
  $comment = $vars['comment'];
  
  $node_type = node_get_types('type', node_load($comment->nid))->type;
  $log = comment_driven_load_log($comment->cid);
  if (!$log) return;

  $live_render = (!$log->frozen && comment_driven_is_live_render($node_type));
  $diff_render = $live_render ? driven_diff_render($node_type, $log->changes) : $log->diff_render;
  $diff_summary_table = driven_diff_summary_table($diff_render);
  
  // IMPORTANT: first check that the module exists before attempting its constant COMMENT_DRIVEN_INSPECT__PERM
  if (variable_get('comment_driven:inspect_links', 1) && module_exists('comment_driven_inspect') && user_access(COMMENT_DRIVEN_INSPECT__PERM)) {
    if (empty($diff_render)) {
      // if this point was reached then !empty($log->changes)
      // lets print something to allow hover on it
      $diff_summary_table = '<div class="error" style="width:20%">empty diff_render</div>';
    }
    $url = url('admin/build/comment-driven-inspect', array('query' => "ids=$comment->cid"));
    // CSS class for hover support
    $diff_inspect = ''
      . '<div class="comment_driven_inspect-content">'
      . '<a href="' . $url . '">' . t('driven inspect') . '</a>'
      . ' {'
      . 'cid: ' . $comment->cid
      . '; vids: ' . $log->old_vid . '-' . $log->new_vid
      . '; method: ' . ($log->frozen ? t('Frozen by flag') : ($live_render ? t('Live render per type') : t('Frozen per type')))
      . '}'
      // despite the CSS height, I also like to contraint it by HTML to avoid bizarre effects until CSS are loaded
      . '<img class="comment_driven_inspect-icon" height="20" src="' . drupal_get_path('module', 'driven') . '/driven-logo.jpg" />'
      . '</div>';
      
    $diff_prefix = '<div class="comment_driven_inspect">' . $diff_inspect . $diff_summary_table . '</div>';
  }
  else {
    $diff_prefix = $diff_summary_table;
  }
  
  //$vars['comment_body'] = $vars['content']; // $vars['comment']->comment
  $vars['content'] = $diff_prefix . $vars['content'];

  if ($log->old_vid != $log->new_vid) {
    // to be used like: print l(t('view revision before changes'), $driven_revision_before . '/view')
    $vars['driven_revision_before'] = "node/$comment->nid/revisions/$log->old_vid"; 
    $vars['driven_revision_after'] = "node/$comment->nid/revisions/$log->new_vid";
  }
}

///\\\///\\\///\\\///\\\///

/**
 * Implements hook_unsupported_driven_props().
 */
function comment_driven_unsupported_driven_props($driven_props) {
  return driven_diff_unsupported_driven_props($driven_props);
}

/**
 * Implements hook_form_FORM_ID_alter() for driven_props_overview_form().
 */
function comment_driven_form_driven_props_overview_form_alter(&$form, &$form_state) {
  $node_type = $form['#node_type'];
  $driver_mod = $form['#driver_mod'];
  
  if ($driver_mod != 'comment_driven') {
    return; // step out
  }
  
  // @per-module-discrimination: incompatible with comment_upload [#741544-8]
  if (comment_driven_is_attachments_on_comments($node_type)) {
    $form['driven_props']['comment_upload'] = array(
      '#type' => 'item', 
      '#value' => t('Regretfully comment driven properties are <a href="!url">incompatible with comment_upload</a>.', array('!url' => 'http://drupal.org/node/741544#comment-2715990'))
        . '<br/>' . t('You can disable "attachments on comments" to enable comment driven properties for this content type.')
        . '<br/>' . t('Otherwise you can try <a href="!url">an alternative approach</a> to achieve attachments on comments.', array('!url' => 'http://drupal.org/node/739690#comment-2727854')),
      '#prefix' => '<div class="warning">',
      '#suffix' => '</div>',
      '#weight' => -10,
    );
    // would be very annoying to have to submit once to disable attachments on comments
    // and then after refreshing re-submit to enable driven properties
    //$form['driven_props']['enabled']['#default_value'] = 0;
    //$form['driven_props']['enabled']['#disabled'] = TRUE;
  }
  
  if (module_exists('driven_acp')) {
    $form['driven_props']['acp_note'] = array(
      '#type' => 'fieldset',
      '#title' => t('Note regarding Access Control Policies'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Note that "grant" and "deny" are not exactly opposites.')
        . '<ul>'
        . '<li>' . t('"deny" options are meant to "disable driven property" or else fallback to "follow node edition access control"') . '</li>'
        . '<li>' . t('"grant" options are meant to "open access control" or else fallback to "disable driven property"') . '</li>'
        . '</ul>',
      '#weight' => -9,
    );
  }
}

/**
 * Implements hook_driven_props_type_settings().
 */
function comment_driven_driven_props_type_settings() {
  $type_settings = array(
    'task_title' => t('comment driven'),
    'menu_title' => 'Comment driven',
    'description_tail' => t('driven through comments'),
    'behaviors' => array(
      'driven_acp',
      'driven_cck_producer_consumer',
    ),
  );
  return $type_settings;
}

/**
 * Implements hook_prop_behavior_alter().
 */
function comment_driven_prop_behavior_alter(&$form, $node_type, $prop, $behavior) {
  if ($behavior == 'driven_acp') {
    // make clear what would be the default setting
    $form['acp']['#default_value'] = 'grant_all_roles';
    unset($form['acp']['#options']['none']);
    
    $perm = comment_driven_get_perm_name('drive', 'ALL');
    $roles = user_roles(FALSE, $perm);
    $perm = comment_driven_get_perm_name('drive', $node_type);
    $roles += user_roles(FALSE, $perm);
    $form['roles']['#options'] = $roles;
    
    // highlight the content type name
    $perm = comment_driven_get_perm_name('drive', '<b>' . $node_type . '</b>');
    $form['roles']['#description'] = t('Listed roles are limited to those having permission:') . ' ' . $perm;
  }
}

/**
 * Implements hook_driven_props_type_settins_form(). 
 */
function comment_driven_driven_props_type_settings_form($node_type) {
  module_load_include('inc', 'comment_driven', 'comment_driven.admin');
  return _comment_driven_driven_props_type_settings_form($node_type);
}

/**
 * Implements hook_driven_global_settings_form().
 */
function comment_driven_driven_global_settings_form() {
  module_load_include('inc', 'comment_driven', 'comment_driven.admin');
  return _comment_driven_driven_global_settings_form();
}
