<?php

/********************************************************************
 * Constants
 ********************************************************************/

/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_theme()
 */
function pg_manual_payment_theme() {
   return array(
    'pg_manual_payment_list' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_mail().
 */
function pg_manual_payment_mail($key, &$message, $params) {
	$language = $message['language'];
	$variables = user_mail_tokens($params['user'], $language);

	$variables['!purse'] = $params['payment_method']->purse;
	$t=$params['t'];
	$variables['!txnid'] = $t->txnid;

	$format = module_invoke($t->type, 'pgapi_format_price');
  $formated_price = number_format($t->extra['prices'][$t->extra['wallet']],$format['decimals'],$format['dec_point'],$format['thousands_sep']);
  $formated = theme('pgapi_format_price_plain',$formated_price,$params['payment_method']->symbol,$format['position']);

	$variables['!price'] = $formated;

	switch($key) {
		case 'notice':
				$message['subject'] = t('Payment Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear !username
Your Payment #!txnid will be checked today.

Amount: !price
Payment Account: !purse

Best regards,
!site
", $variables, $language->language);
			break;
		case 'notice_admin':
				$message['subject'] = t('Payment Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear Admin
User !username just sent a payment #!txnid

Amount: !price
Payment Account: !purse

Please check it out and process it.

Best regards,
!site
", $variables, $language->language);
			break;

	}
}


/**
 * Implementation of hook_menu()
 */

function pg_manual_payment_menu() {



  $items['payment/manual_payment/%txnid'] = array(
      'title'            => 'Manual Payment',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pg_manual_payment_payform',2),
      'access callback'  => TRUE,
      'type'             => MENU_CALLACK,
  );

  $items['admin/pgdata/pgsettings/manual_payment'] = array(
      'title'           => 'Manual Payment',
      'description'     => 'Manual Payment payment settings.',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_manual_payment_list'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'            => 'pg_manual_payment.admin.inc',
      'type'            => MENU_LOCAL_TASK,
  );
  $items['admin/pgdata/pgsettings/manual_payment/list'] = array(
      'title'           => 'Accounts',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_manual_payment_list'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'            => 'pg_manual_payment.admin.inc',
      'type'            => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/pgdata/pgsettings/manual_payment/add'] = array(
      'title'           => 'Add Account',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_manual_payment_add'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'            => 'pg_manual_payment.admin.inc',
      'type'            => MENU_LOCAL_TASK,
  );

  $items['admin/pgdata/pgsettings/manual_payment/edit/%'] = array(
      'title'           => 'Edit Wallet',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_manual_payment_edit',5),
      'access callback' => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'            => 'pg_manual_payment.admin.inc',
      'type'            => MENU_CALLBACK,
  );

  $items['admin/pgdata/pgsettings/manual_payment/settings'] = array(
      'title'            => 'Settings',
      'description'      => 'Manual Payment Settings',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pg_manual_payment_settings'),
      'access arguments' => array('administer pgapi'),
      'type'             => MENU_LOCAL_TASK,
      'file'            => 'pg_manual_payment.admin.inc',
  );


  return $items;
}

/********************************************************************
 * Pgapi Gateway Hooks
 ********************************************************************/
function pg_manual_payment_pgapi_gw($op,$a3=NULL,&$a4=NULL){
  switch($op){
    case 'display name':
        $ret = t('Manual Payment Payment Gateway');
      break;
    case 'payment page':
        $ret = url('payment/manual_payment/'.$a3 ,array('absolute' => TRUE));
      break;
    case 'payment gateway info':
        $ret['name']=t('Manual Payment');
        $result = db_query('SELECT * FROM {pg_manual_payment_accounts} ORDER BY name');
        while ($rr = db_fetch_object($result)){
        	$prices[$rr->name] = $a3*$rr->rate.' '.$rr->symbol;
        }
        $ret['price']= $prices;
      break;
    case 'process form':
        $form_result = $a4;
        $t = $a3;
        $ret = pg_manual_payment_process_form($form_result,$t);
      break;
    case 'get form':
        $t=$a3;
        $form_result = $a4;
        $ret = pg_manual_payment_extraform($form_result,$t);
      break;

  }
  return $ret;
}

function pg_manual_payment_pgapi_transaction($status,&$t){
  switch($status){
    case PG_PENDING:
        $result = db_query('SELECT * FROM {pg_manual_payment_accounts} ORDER BY name');
        while ($rr = db_fetch_object($result)){
          $prices[$rr->paid] = round(($t->amount*$rr->rate), 2);
        }
        $t->extra['prices'] =  $prices;
      break;
  }
}

/********************************************************************
 * Other Functions
 ********************************************************************/
function pg_manual_payment_extraform($form_state,$t) {
$result = db_query('SELECT * FROM {pg_manual_payment_accounts} ORDER BY name');
  $first=true;
  while ($template = db_fetch_object($result)){
     if($first){
       $first=false;
       $def_purse=$template->paid;
     }
     $purses[$template->paid]=$t->amount * $template->rate." <span class='symbol'>".$template->symbol."</span>";
  }//while

  $form['wallet'] = array(
        '#type' => 'radios',
        '#title' => t("Type of account"),
        '#options' => $purses,
        '#default_value' => $def_purse,
        '#description' => t("What type of currency will be used."),
      );
  return $form;
}



function pg_manual_payment_process_form(&$form_result,$t){
  $t->method='pg_manual_payment';
  $t->extra['wallet']=$form_result['wallet'];

  pgapi_transaction_save($t);
  drupal_goto('payment/manual_payment/'.$t->txnid);
}


function pg_manual_payment_payform($form_state,$t) {
  global $user;
  if($user->uid != 1 and $user->uid != $t->uid){
   drupal_access_denied();
  }

  $account = db_fetch_object(db_query('SELECT * FROM {pg_manual_payment_accounts} where paid=%d',$t->extra['wallet']));

  $form['txnid']=array(
    '#type'  => 'value',
    '#value' => $t->txnid,
  );

  $form['payment'] = array (
    '#type' => 'fieldset',
    '#title' => t('Manual Payment'),
    '#description' => t('Please make a payment and click submit'),
  );
  $form['payment']['account'] = array (
    '#type'  => 'textfield',
    '#title' => $account->name,
    '#value' => $account->purse,
    '#description' => t('Please send your payment on this wallet'),
  );

  $form['payment']['ammount'] = array (
    '#type'  => 'textfield',
    '#title' => t('Ammount'),
    '#value' => $t->extra['prices'][$t->extra['wallet']],
    '#description' => t('Please send your payment on this wallet'),
  );


  $sitename=variable_get('site_name', 'Drupal');
  $desc = t('Purchase for site !sitename. Transaction !txnid',array('!sitename' => $sitename,'!txnid' => $t->txnid));


  $form['payment']['description'] = array (
    '#type'  => 'textarea',
    '#title' => t('Payment description'),
    '#value' => $desc,
    '#description' => t('Please put this description'),
  );
  $form['submit'] = array (
    '#type'  => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function pg_manual_payment_payform_submit($form, &$form_state) {
  $t = pgapi_transaction_load($form_state['values']['txnid']);
  $user=user_load($t->uid);
  $account = db_fetch_object(db_query('SELECT * FROM {pg_manual_payment_accounts} where paid=%d',$t->extra['wallet']));

  $params['t']=$t;
  $params['user']=$user;
  $params['payment_method']=$account;
  drupal_mail('pg_manual_payment', 'notice', $t->email, user_preferred_language($user), $params);
  $admin_mail=variable_get('pg_manual_payment_email','');
  if(!empty($admin_mail)){
    drupal_mail('pg_manual_payment', 'notice_admin', $admin_mail, user_preferred_language($user), $params);
  }
  drupal_set_message('Your payment will be checked soon. You will receive email notification.');
}

/********************************************************************
 * Functions theme
 ********************************************************************/

function theme_pg_manual_payment_list($form){
  $header = array(
    theme('table_select_header_cell'),
    t('Account Name'),
    t('Account Number'),
    t('Rate'),
  );

  foreach (element_children($form) as $key) {
    $row = array();

    if (is_array($form[$key]['purse'])) {
      $row[] = drupal_render($form['check'][$key]);
      $row[] = drupal_render($form[$key]['edit']);
      $row[] = drupal_render($form[$key]['purse']);
      $row[] = drupal_render($form[$key]['rate']);

      $rows[] = $row;
    }
  }
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}
