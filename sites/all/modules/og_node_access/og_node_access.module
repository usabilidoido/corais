<?php
/**
 * @file
 * Code for OG Node Access module.
 */

/**
 * Implementation of hook_menu().
 */
function og_node_access_menu() {
  $items = array();

  $items['admin/og/node-settings'] = array(
    'title' => 'OG Post Settings',
    'description' => 'Rebuild node access for group content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_node_access_node_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer organic groups'),
    'file' => 'og_node_access.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/og/node-settings/rebuild'] = array(
    'title' => 'OG Rebuild permissions', 
    'page arguments' => array('og_node_access_rebuild_confirm'),
    // Any user than can potentially trigger a node_acess_needs_rebuild(TRUE)
    // has to be allowed access to the 'node access rebuild' confirm form. 
    'access arguments' => array('administer organic groups'),
    'file' => 'og_node_access.admin.inc',
    'type' => MENU_CALLBACK,
  );

  if (module_exists('spaces_og')) {
    $items['manage/og/node-settings'] = $items['admin/og/node-settings'];
    $items['manage/og/node-settings/rebuild'] = $items['admin/og/node-settings/rebuild'];
    $items['manage/og/node-settings']['access callback'] = 'og_node_access_admin_access';
    $items['manage/og/node-settings/rebuild']['access callback']= 'og_node_access_admin_access';
  }

  return $items;
}

/**
 * Implementation of hook_help().
 */
function og_node_access_help($path, $arg) {
  if (module_exists('spaces_og')) {
    $space = spaces_get_space();
    if ($space->type != 'og') {
      unset($space);
    }
  }
  $needs_rebuild = og_node_access_needs_rebuild();

  if ($path != 'admin/og/node-settings/rebuild' && $path != 'manage/og/node-settings/rebuild'
      && $path != 'batch' && strpos($path, '#') === FALSE && !empty($needs_rebuild)
      && (user_access('access administration pages') || (isset($space) && spaces_access_admin()))) {
    if ($path == 'admin/og/node-settings' || $path == 'manage/og/node-settings') {
      $message = t('The content access permissions need to be rebuilt for one or more groups.');
    }
    elseif (og_get_group_context()) {
      $message = t('The content access permissions for this group needs to be rebuilt. Please visit <a href="@node_access_rebuild">this page</a>.', array('@node_access_rebuild' => url('manage/og/node-settings/rebuild')));
    }
    else {
      $message = t('The content access permissions need to be rebuilt for one or more groups. Please visit <a href="@node_access_rebuild">this page</a>.', array('@node_access_rebuild' => url(arg(0) . '/og/node-settings/rebuild')));
    }
    drupal_set_message($message, 'error');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function og_node_access_form_alter(&$form, &$form_state, $form_id) {
  // Modify all group type node forms for updating a node.
  if ($form['#id'] == 'node-form' && og_is_group_type($form['#node']->type)
      && $form['nid']['#value'] != NULL) {
    // Note: This submit handler must happen after the node submit handler.
    // Form alter mangling of submit order could break this.
    $form['buttons']['submit']['#submit'][] = '_og_node_access_group_submit';
  }
}

/**
 * Callback handler for triggering access rebuild.
 */
function _og_node_access_group_submit($form, $form_state) {
  $groups = og_node_access_needs_rebuild();
  if (!empty($groups)) {
    og_node_access_rebuild($groups, TRUE);
  }
}

/**
 * Flag/unflag that node access needs rebuilding for a given group.
 *
 * If node access has otherwise been marked for general rebuilding, skip this.
 *
 * @param $rebuild
 *  (Optional) Specify the NID of the groups to have access rebuilt, FALSE to clear.
 *  
 * @see node_access_needs_rebuild
 */
function og_node_access_needs_rebuild($rebuild = NULL) {
  // If a general node access is called for, it takes precendence.
  if (node_access_needs_rebuild()) {
    variable_del('og_node_access_needs_rebuild');
    return array();
  }

  if (!isset($rebuild)) {
    return variable_get('og_node_access_needs_rebuild', array());
  }
  elseif ($rebuild) {
    $needs_rebuild = variable_get('og_node_access_needs_rebuild', array());
    $needs_rebuild[$rebuild] = $rebuild;
    variable_set('og_node_access_needs_rebuild', $needs_rebuild);
  }
  else {
    variable_del('og_node_access_needs_rebuild');
  }
}

/**
 * API call to facilitate rebuilding node access per group.
 *
 * @param $group_node
 *  The group node who's affiliated posts must have node access rebuilt.
 * @param $batch_mode
 *  Set to TRUE to use Batch Operations system.
 *
 * @see node_access_rebuild
 */
function og_node_access_rebuild($groups, $batch_mode = FALSE) {
  if (!is_array($groups)) {
    $groups = array($groups);
  }
  $group_sql = 'IN ('. db_placeholders($groups). ')';

  // Delete access records for the group.
  db_query("DELETE na FROM {node_access} na JOIN {og_ancestry} og ON na.nid = og.nid AND og.group_nid {$group_sql}", $groups);  
  
  if ($batch_mode) {
    $batch = array(
      'title' => t('Rebuilding content access permissions'),
      'progress_message' => t('Completed job @current of @total.'),
      'operations' => array(
        array('_og_node_access_rebuild_batch_operation', array($groups)),
      ),
      'init_message' => t('Verifying Permissions'),
      'error_message' => t('An error has occured'),
      'finished' => '_og_node_access_rebuild_batch_finished',
    );
    batch_set($batch);
    $redirect = count($groups) == 1 ? 'node/' . reset($groups) : '';
    batch_process($redirect);
  }
  else {
    // Try to allocate enough time to rebuild node grants
    if (function_exists('set_time_limit')) {
      @set_time_limit(240);
    }
    
    // Individual posts.
    $result = db_query("SELECT nid FROM {node} n INNER JOIN {og_ancestry} og ON n.nid = og.nid WHERE og.group_nid {$group_sql}", $groups);
    while ($node = db_fetch_object($result)) {
      $loaded_node = node_load($node->nid, NULL, TRUE);
      // To preserve database integrity, only aquire grants if the node
      // loads successfully.
      if (!empty($loaded_node)) {
        node_access_acquire_grants($loaded_node);
      }
    }
  }

  if (!isset($batch)) {
    drupal_set_message(t('Content permissions have been rebuilt.'));
    og_node_access_needs_rebuild(FALSE);
    cache_clear_all();
  }
}

/**
 * Batch operation for og_node_access_rebuild_batch.
 *
 * @param $group
 *  The group node whose affiliated nodes we are rebuilding.
 *
 * @see _node_access_rebuild_batch_operation.
 */
function _og_node_access_rebuild_batch_operation($groups, &$context) {
  $group_sql = 'IN ('. db_placeholders($groups). ')';

  if (empty($context['sandbox'])) {
    // Initiate multistep processing.
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(DISTINCT n.nid) FROM {node} n JOIN {og_ancestry} og ON og.nid = n.nid WHERE group_nid {$group_sql}", $groups));
  }

  // Process the next 30 nodes.
  $limit = 30;
  $sql_args = array($context['sandbox']['current_node']) + $groups;
  $result = db_query_range("SELECT n.nid FROM {node} n JOIN {og_ancestry} og ON og.nid = n.nid WHERE n.nid > %d AND og.group_nid {$group_sql} ORDER BY n.nid ASC", $sql_args, 0, $limit);
  while ($row = db_fetch_array($result)) {
    //load the node for grant rebuild
    $loaded_node = node_load($row['nid'], NULL, TRUE);
    // To preserve database integrity, only aquire grants if the node
    // loads successfully.
    if (!empty($loaded_node)) {
      node_access_acquire_grants($loaded_node);
    }
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $row['nid'];
  }
  $context['message'] = t('Rebuilding Content Permissions: !pages pages remaining', array('!pages' => ($context['sandbox']['max'] - $context['sandbox']['progress'])));

  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Post-processing for og_node_access_rebuild_batch.
 *
 * @see _node_access_rebuild_batch_finished
 */
function _og_node_access_rebuild_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Content permissions have been rebuilt.'));
    og_node_access_needs_rebuild(FALSE);
  }
  else {
    drupal_set_message(t('The content access permissions have not been properly rebuilt.'), 'error');
  }
  cache_clear_all();
}

/**
 * Checks that the current user is a group administrator.
 *
 * This is only used for Spaces integration, where we do not have the nid in the URL.
 */
function og_node_access_admin_access() {
  return og_is_group_admin(og_get_group_context());
}
