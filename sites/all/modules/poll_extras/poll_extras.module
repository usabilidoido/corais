<?php
// Poll Extras - adds additional permissions logic to viewing poll results

/**
 * Implementation of hook_perm().
 */
function poll_extras_perm() {
  return array('view poll results', 'view finished poll results');
}

/**
 * Implementation of hook_nodeapi().
 */
function poll_extras_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'poll') {
    switch ($op) {
      case 'insert':
      case 'update':
        $msg = check_plain($_POST['poll_view_msg']);
        db_query("UPDATE {poll} SET message='%s' WHERE nid=%d", $msg, $node->nid);
      break;
    }
  }
}

function _poll_extras_load_msg($nid) {
  $val = db_result(db_query("SELECT message FROM {poll} WHERE nid=%d", $nid));
  if ($val != '') {
    return $val;
  }
  else {
    return variable_get('poll_default_message', 'Thank you for taking the poll!');
  }
}  

/**
 * Implementation of hook_form_alter().
 */
function poll_extras_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'poll_view_voting') {
    $node = menu_get_object();
    // see if the user is allowed to view the poll results
    if (user_access('view poll results') || (user_access('view finished poll results') && !$node->active)) {
      // render as usual
    }
    else {
      if (!$node->allowvotes) {
        // unset everything associated with the form or it will still render
        $form = array();
        $form['poll_view_voting']['#value'] = _poll_extras_load_msg($node->nid);
      }
    }
  }
  // alter the form as it's about to be output
  if ($form_id == 'poll_cancel_form') {
    $node = menu_get_object();
    // see if the user is allowed to view the poll results
    if (user_access('view poll results') || (user_access('view finished poll results') && !$node->active)) {
      // render as usual
    }
    else {
      if (!$node->allowvotes) {
        $form = array();
        $form['poll_extras_msg'] = _poll_extras_load_msg($node->nid);
      }
    }
  }
  if ($form_id == 'poll_node_form') {
    // see if this poll has been submitted otherwise provide a default message
    if (isset($form['nid']['#value'])) {
      $default = _poll_extras_load_msg($form['nid']['#value']);
    }
    else {
      $default = variable_get('poll_default_message', 'Thank you for taking the poll!');
    }
    $form['settings']['poll_view_msg'] = array(
      '#title' => t('Message after submit'),
      '#type' => 'textfield',
      '#description' => t("Optional Message to display to users who don't have permission to view the poll results."),
      '#default_value' => $default,
    );
  }
}

/**
 * Implementation of hook_menu().
 */
function poll_extras_menu() {
  $items['admin/settings/poll_extras'] = array(
    'title' => 'Poll Extras',
    'description' => 'Configure the default values for the poll extras module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poll_extras_admin_settings'),
    'file' => 'poll_extras.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function poll_extras_menu_alter(&$items) {
  // allows for integration with the ajax poll module
  if (isset($items['poll/ajax/vote/%node/%/%'])) {
    $items['poll/ajax/vote/%node/%/%']['page callback'] = 'poll_extras_ajax_poll_callback';
  }
}

/**
 * Override callback for poll/ajax, this allows this module to be compatible with ajax poll
 */
function poll_extras_ajax_poll_callback($type, $node, $teaser, $block) {
  //  Call poll_view to trigger the current submit handlers.
  poll_view($node);

  //  Reset POST and the $node so that we get fresh copies.
  unset($_POST);
  $node = node_load($node->nid, NULL, TRUE);

  $poll = poll_view($node, $teaser, FALSE, $block);
  $status = count(drupal_get_messages('error', FALSE)) == 0;
  $messages = theme('status_messages');
  // this is where we need to do our permissions test
  if (user_access('view poll results') || (user_access('view finished poll results') && !$node->active)) {
    $output = drupal_render($poll->content);
  }
  else {
    $output = _poll_extras_load_msg($node->nid);
  }
  drupal_json(array('status' => $status, 'messages' => $messages, 'output' => $output));
}
