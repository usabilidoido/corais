<?php
// $Id: nodereference_views_select.module,v 1.2.2.1 2009/08/12 08:33:38 electricmonk Exp $

define('NODEREFERENCE_VIEWS_SELECT_OPTIONS_PATH', 'nvs/ajax/options');

/**
 * Implementation of hook_menu().
 *
 */
function nodereference_views_select_menu()
{
	$items = array();
	
	$items[NODEREFERENCE_VIEWS_SELECT_OPTIONS_PATH] = array (
		'title' => 'Select items to add',
		'page callback' => 'nodereference_views_select_options_callback',
		'access arguments' => array('access content'),
	);
	
	return $items;
}

/**
 * Implementation of hook_widget_info().
 *
 */
function nodereference_views_select_widget_info() {
  return array(
    'nodereference_views_select' => array(
      'label' => t('Check boxes/radio buttons with sorting and a modal panel'),
      'field types' => array('nodereference'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}


/**
 * Implementation of hook_widget().
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function nodereference_views_select_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch ($field['widget']['type']) {
    case 'nodereference_views_select':
      $element = array(
        '#type' => 'nodereference_views_select',
        '#default_value' => $items,
      );
      break;
  }
  return $element;
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function nodereference_views_select_elements() {
  return array(
    'nodereference_views_select' => array(
      '#input' => TRUE,
      '#columns' => array('uid'), '#delta' => 0,
      '#process' => array('nodereference_views_select_widget_process'),
    ),
  );
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function nodereference_views_select_widget_process($element, $edit, $form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];
  $field_key  = $element['#columns'][0];
    
  // See if this element is in the database format or the transformed format,
  // and transform it if necessary.
  if (is_array($element['#value']) && !array_key_exists($field_key, $element['#value'])) {
    $element['#value'] = optionwidgets_data2form($element, $element['#default_value'], $field);
  }

  $is_modal = $element['#is_modal'];
  $is_multiple = $field['multiple'];
  
  $options = nodereference_views_select_options($field, $element['#value'][$field_key], $is_modal);
  
  $class = $is_modal ? 'nvs-options nvs-options-' . $element['#field_name'] : 'nvs-field nvs-field-' . $element['#field_name'];
  
  $element[$field_key] = array(
    '#type' => $is_multiple ? 'checkboxes' : 'radios',
    // The following values were set by the content module and need
    // to be passed down to the nested element.
 	'#required' => isset($element['#required']) ? $element['#required'] : $field['required'],
    '#multiple' => isset($element['#multiple']) ? $element['#multiple'] : $field['multiple'],
    '#options' => $options,
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  	'#attributes' => array('class' => $class),
  );
  
  if ($is_multiple) {
  	$element[$field_key]['#theme'] = 'nodereference_views_select_checkboxes';  	
  }
  
  if (!$is_modal) {
	  $element['modal_controls'] = array (
	  	'#value' => theme('nodereference_views_select_modal_controls', $field, $element, $field_key),
	  	'#prefix' => '<div class="nvs-control">',
	  	'#suffix' => '</div>',
	  );
	  

 	  $element['clear_selection'] = array (
	    '#value' => '<a href="#" class="nvs-clear-selection">' . t('Clear selection') . '</a>',
	  	'#prefix' => '<div class="nvs-control">',
	  	'#suffix' => '</div>',
 	  );	  	
	  
  }
  
  // Set #element_validate in a way that it will not wipe out other
  // validation functions already set by other modules.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }
  
  // use optionwidgets_validate to perform basic validation 
  array_unshift($element['#element_validate'], 'optionwidgets_validate');
  
  // Make sure field info will be available to the validator which
  // does not get the values in $form.
  $form_state['#field_info'][$field['field_name']] = $field;
  
  return $element;  
}

/**
 * returns either all options or only the selected ones, according to the value
 * of $values
 * 
 * @param $field
 * @param $values
 * @param $is_modal
 * @return options for the select
 */
function nodereference_views_select_options($field, $values, $is_modal = false) {
	// use nodereference's default mechanism for retrieving the list of allowed values
	$unselected = nodereference_allowed_values($field);
	$selected = array();
	
	if (isset($values))
	{
		// in case of a single selection
		if (!is_array($values)) {
			$values = array($values);
		}
		
		foreach ($values as $value)
		{
			$selected[$value] = $unselected[$value];
			unset($unselected[$value]);
		}
	}
	
	return $is_modal ? $unselected : $selected;
}

/**
 * Renders the content for the NVS modal panel
 * 
 * @param $content_type
 * @param $field_name
 * @param $selected
 * @return html
 */
function nodereference_views_select_options_callback($content_type, $field_name, $field_key, $selected = null) {
  ctools_include('modal');	
  ctools_include('ajax');	
  _nodereference_views_select_add_js();
   module_load_include('inc', 'content', 'includes/content.node_form');
  
  $field = content_fields($field_name, $content_type);
  
  if ($field['multiple']) {
  	$values = isset($selected) ? explode(',', $selected) : null;
  	$close_text = t('Done');
  } else
  {
  	$values = $selected;
  	$close_text = t('Cancel');
  }
    
  $form = array();

  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  
  $form += (array) content_field_form($form, $form_state, $field);
  
  if ($values) {
  	$form[$field_name]['#value'][$field_key] = $values;
  }
    
  $form[$field_name]['#is_modal'] = true;
  $form['#field_info'][$field_name] = $field;
  $form['#type'] = 'form';
  
  drupal_process_form('nvs_options', $form, $form_state);
  $output = drupal_render($form);
 
  $output .= '<a href="#" class="nvs-modal-dismiss">' . $close_text . '</a>';
  
  ctools_modal_render(t('Select items to add to @field', array('@field' => $field['widget']['label'])), 
	 				  $output);
}

/**
 * Implementation of hook_theme().
 */
function nodereference_views_select_theme() {
  return array(
    'nodereference_views_select' => array(
      'arguments' => array('element' => NULL),
    ),
    'nodereference_views_select_checkboxes' => array(
      'arguments' => array('element' => NULL),
    ),    
    'nodereference_views_select_modal_controls' => array(
      'arguments' => array('field' => NULL, 'element' => NULL, 'field_key' => NULL),
    ),
  );
}

/**
 * Themes the controls used to show the modal panel
 * @param $field
 * @param $element
 * @param $field_key
 * @return html
 */
function theme_nodereference_views_select_modal_controls($field, $element, $field_key) {
  ctools_include('modal');
  ctools_modal_add_js();
  
  $values = $element['#value'][$field_key];
  
  if (!$values) {
  	$values = array();
  }
  else if (!is_array($values)) {
  	$values = array($values);
  }
  
  $url = NODEREFERENCE_VIEWS_SELECT_OPTIONS_PATH . '/' . $field['type_name'] . '/' . $field['field_name'] . '/' . $field_key . '/' . implode(',', $values);
  
  $attributes = array('class' => 'nvs-control ctools-use-modal', 'id' => form_clean_id('nvs-control-' . $field['field_name']));
  
  $text = $field['multiple'] ? t('Add') : t('Select'); 
  
  return l($text, $url, array('attributes' => $attributes));
}

/**
 * 
 * @param $element
 * @return html
 */
function theme_nodereference_views_select($element) {
  _nodereference_views_select_add_js();
  return theme('form_element', $element, $element['#children']);
}

function theme_nodereference_views_select_checkboxes($element) {
	$children = element_children($element);
	$items = array();
	
	foreach ($children as $child)
	{
		if (!empty($child)) { // an empty checkbox will appear when nothing is selected 
			$items[] = theme('checkbox', $element[$child]);
		}
	}
	
	return theme('item_list', $items, null, 'ul', array('class' => 'checkboxes'));
}

function _nodereference_views_select_add_js() {
	drupal_add_js(drupal_get_path('module', 'nodereference_views_select') . '/js/nvs.js');
	drupal_add_js(drupal_get_path('module', 'nodereference_views_select') . '/js/jquery-ui-1.6.custom.min.js');	
	
	drupal_add_css(drupal_get_path('module', 'nodereference_views_select') . '/nvs.css');	
}