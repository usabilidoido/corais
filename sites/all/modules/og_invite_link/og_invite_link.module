<?php


/**
 * Implementation of hook_menu();
 */
function og_invite_link_menu() {
  $items['og/users/%node/invite'] = array(
    'title' => 'Invite members',
    'access callback' => 'og_invite_link_invite_access',
    'access arguments' => array(2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_invite_link_invite_page_form', 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'og_invite_link.pages.inc',
    'weight' => 8,
  );
  $items['group/%node/join/%user/%'] = array(
    'title' => 'Join to group',
    'access callback' => 'og_invite_link_join_access',
    'access arguments' => array(1, 3, 4),
    'page callback' => 'og_invite_link_join',
    'page arguments' => array(1, 3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'og_invite_link.pages.inc',
  );
  $items['og_invite_link/autocomplete'] = array(
    'title' => 'Autocomplete OG invite link',
    'page callback' => 'og_invite_link_autocomplete',
    // is this the right permission?
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
    'file' => 'og_invite_link.pages.inc',
  );
  $items['admin/og/og_invite_link'] = array(
    'title' => 'Organic groups invitations',
    'description' => 'Configure group invitation settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_invite_link_admin'),
    'access arguments' => array('administer organic groups'),
    'file' => 'og_invite_link.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter();
 */
function og_invite_link_menu_alter(&$items) {
  // Remove OG's invite page
  unset($items['og/invite/%node']);
  $items['user/register']['access callback'] = 'og_invite_link_user_register_access';
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 * 
 * Alter the user registration form
 */
function og_invite_link_form_user_register_alter(&$form, &$form_state) {
  // Detect any invitation links and provide the registering user with the
  // option to join the applicable groups.
  if (variable_get('og_invite_link_invite_unregistered', FALSE) && !empty($_GET['og-invite-token'])) {
    $min_valid_timestamp = $_SERVER['REQUEST_TIME'] - (variable_get('og_invite_link_expiration', 30) * 6400);
    if (og_invite_link_valid_unregistered_token($_GET['mail'], $_GET['og-invite-token'])) {
      // Find all groups this email address has been invited to join with
      // taking into account changes in group privacy settings
      // and token expirations.
      $group_nids = array();
      $tokens = array();
      $query = "
        SELECT oi.group_nid, oi.token, oi.moderated, n.title 
        FROM {og_invite} oi 
        INNER JOIN {node} n ON n.nid = oi.group_nid 
        INNER JOIN {og} og ON og.nid = n.nid 
        WHERE oi.mail = '%s' 
        AND (og.og_selective != %d OR oi.moderated = 0) 
        AND oi.timestamp >= %d
        AND n.status = 1
      ";
      $results = db_query($query, $_GET['mail'], OG_CLOSED, $min_valid_timestamp);
      while ($result = db_fetch_object($results)) {
        $group_nids[$result->group_nid] = $result->title;
        $tokens[$result->group_nid] = array('token' => $result->token, 'moderated' => $result->moderated);
      }

      if (!empty($group_nids)) {
        $form['account']['mail']['#default_value'] = check_plain($_GET['mail']);
        $form['og_invite'] = array(
          '#type' => 'fieldset',
          '#title' => t('Group invitations'),
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
        );  
        $form['og_invite']['og_invite_group_nids'] = array(
          '#type' => 'checkboxes',
          '#options' => $group_nids,
          '#title' => t("Yes, I'd like to join these groups"),
          '#default_value' => array_keys($group_nids),
        );
        $form['og_invite']['og_invites'] = array(
          '#type' => 'value',
          '#value' => $tokens,
        );
        $form['#submit'][] = 'og_invite_user_register_submit';
      }
      else {
        drupal_set_message(t("This invitation is either invalid or has expired."));
      }
    }
  }
}

/**
 * Submit handler for the user registration form
 */
function og_invite_user_register_submit(&$form, &$form_state) {
  $account = $form_state['user'];
  foreach ($form_state['values']['og_invite_group_nids'] as $group_nid => $join) {
    if ($join) {
      $invite = $form_state['values']['og_invites'][$group_nid]; 
      // Remove any other pending invitations for this user and group.
      db_query("DELETE FROM {og_invite} WHERE uid = %d AND group_nid = %d AND token <> '%s'", $account->uid, $group_nid, $invite['token']);
      // Create a group subscription for the user
      og_save_subscription($group_nid, $account->uid, array('is_active' => $invite['moderated'] ? 0 : 1));
      // Update the existing invitations to reflect the newly created account
      // for tracking purposes.
      // Note, this will invalidate the existing tokens.
      db_query("UPDATE {og_invite} SET mail = NULL, uid = %d WHERE mail = '%s'", $account->uid, $account->mail);
      db_query("UPDATE {og_invite} SET accepted_timestamp = %d WHERE token = '%s'", $_SERVER['REQUEST_TIME'], $invite['token']);
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 *
 * Alter the OG admin settings form
 */
function og_invite_link_form_og_admin_settings_alter(&$form, &$form_state) {
  // Add a message template for notifying group admins of sent invitations
  $form['og_settings']['notifications']['og_invite_admin_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Group admin invite notification subject'),
    '#description' => t('The subject of the message sent to group admins whenever a user sends out a group invitation. Available variables: @group, @site, @description, !group_url, @body, @sent-to, @sent-by.'),
    '#default_value' => _og_invite_link_mail_text('og_invite_admin_subject'),
    '#weight' => 19,
  );
  $form['og_settings']['notifications']['og_invite_admin_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Group admin invite notification body'),
    '#description' => t('The body of the message sent to group admins whenever a user sends out a group invitation. Available variables: @group, @site, @description, !group_url, @body, @sent-to, @sent-by.'),
    '#default_value' => _og_invite_link_mail_text('og_invite_admin_body'),
    '#weight' => 20,
  );
  // Weigh the other invite widgets with these
  $form['og_settings']['notifications']['og_invite_user_subject']['#weight'] = 17;
  $form['og_settings']['notifications']['og_invite_user_body']['#weight'] = 18;
  // Add additional variables
  $form['og_settings']['notifications']['og_invite_user_subject']['#description'] .= t(', @sent-to, @sent-by.');
  $form['og_settings']['notifications']['og_invite_user_body']['#description'] .= t(', @sent-to, @sent-by.');
}

/**
 * Implementation of hook_og_links_alter();
 */
function og_invite_link_og_links_alter(&$links) {
  global $user;

  // Remove link to OG's invite page
  unset($links['invite']);

  // Check if the user has access to the invite form
  if ($group = og_get_group_context()) {
    if (og_invite_link_invite_access()) {
      $links['invite'] = l(t('Invite members'), "og/users/{$group->nid}/invite");
    }
  }
}

/**
 * Access callback for the invite form page
 *
 * @param $group
 *   Optionally supply the group object, otherwise attempt to detect
 *   the current group
 * @param $user
 *   Optionally supply the user, otherwise use the current user
 *
 * @return
 *   TRUE if the user can access the groups invite page, otherwise FALSE
 */
function og_invite_link_invite_access($group = NULL, $user = NULL) {
  // If needed, get the current user
  if (!$user) {
    global $user;
  }

  // If needed, get the current group
  if (!$group) {
    if (!($group = og_get_group_context())) {
      return FALSE;
    }
  }

  // Check that the group is a group
  if (!og_is_group_type($group->type)) {
    return FALSE;
  }

  // See if the user is an admin of this group
  if (og_is_group_admin($group, $user)) {
    // Admins always have access
    return TRUE;
  }

  // Provide access depending on the group type
  switch ($group->og_selective) {
    case OG_OPEN:
    case OG_MODERATED:
    case OG_INVITE_ONLY:
      // Members can access the form for these group typess
      if (og_is_group_member($group->nid, FALSE)) {
        return TRUE;
      }
      break;

    case OG_CLOSED:
      // Admins were granted access prior to this
      break;
  }

  return FALSE;
}

/**
 * Access callback for /user/register used to allow user registration when
 * the registering user has an invitation link but site-wide
 * registration is disabled.
 */
function og_invite_link_user_register_access() {
  if (!user_is_anonymous()) {
    return FALSE;
  }
  if (variable_get('user_register', 1)) {
    return TRUE;
  }
  return (variable_get('og_invite_link_allow_registration', 0) && og_invite_link_valid_unregistered_token($_GET['mail'], $_GET['og-invite-token']));
}
/**
 * Helper function to validate invitation tokens for unregistered users.
 */
function og_invite_link_valid_unregistered_token($mail, $token) {
  return (bool)db_result(db_query("SELECT iid FROM {og_invite} WHERE token = '%s' AND mail = '%s'", $token, $mail));
}

/**
 * Check if the user has accesss to the join group callback
 *
 * @param object $node
 *   The group node object.
 * @param object $account
 *   The user object.
 * @param string $token
 *   The token that has to be validated.
 */
function og_invite_link_join_access($node, $account, $token) {
  global $user;

  // If user is logged in, and doesn't match the UID in the URL
  // then deny access
  if ($user->uid && ($user->uid != $account->uid)) {
    return FALSE;
  }

  // All other cases will be checked on the page callback, to allow us
  // to print helpful messages, rather than give an access denied

  return TRUE;
}

/**
 * Implementation of hook_mail();
 */
function og_invite_link_mail($key, &$message, $params) {
  static $users = array();
  static $admins = array();

  switch ($key) {
    case 'invite_to_group':
      $invitation = $params['invitation'];
      $group = $params['group'];

      // Load the invitation recipient
      if (!isset($users[$invitation->uid])) {
        $users[$invitation->uid] = user_load($invitation->uid);
      }
      $sent_to = $users[$invitation->uid];

      // Load the invitation sender
      if (!isset($users[$invitation->sender])) {
        $users[$invitation->sender] = user_load($invitation->sender);
      }
      $sent_by = $users[$invitation->sender];
      
      if (!empty($invitation->uid)) {
        $invite_url = url("group/{$group->nid}/join/{$invitation->uid}/{$invitation->token}", array('absolute' => TRUE));
      }
      else {
        $invite_url = url("user/register", array('absolute' => TRUE, 'query' => "mail={$message['to']}&og-invite-token={$invitation->token}"));
      }

      // Populate the message variables
      $variables = array(
        '@group' => check_plain($group->title),
        '@site' => variable_get('site_name', 'Drupal'),
        '@description' => check_plain($group->og_description),
        '@body' => $params['additional_message'],
        '@sent-to' => $sent_to->name,
        '@sent-by' => $sent_by->name,
        '!group_url' => $invite_url,
      );

      // Set the message subject and body
      $message['subject'] = _og_invite_link_mail_text('og_invite_user_subject', $variables, $message['language']);
      $message['body'] = _og_invite_link_mail_text('og_invite_user_body', $variables, $message['language']);

      // Check if og_notifications is available before we notify admins
      if (module_exists('og_notifications')) {
        // Determine the admins of this group
        if (!isset($admins[$group->nid])) {
          $admins[$group->nid] = array();
          $sql                 = "SELECT og.uid, u.language FROM {og_uid} og";
          $sql                .= " INNER JOIN {users} u ON u.uid = og.uid";
          $sql                .= " WHERE og.nid = %d";
          $sql                .= " AND og.is_active = 1";
          $sql                .= " AND og.is_admin = 1";
          $sql                .= " AND u.status = 1";
          $results             = db_query($sql, $group->nid);
          while ($admin = db_fetch_object($results)) {
            $admins[$group->nid][$admin->uid] = $admin;
          }
        }

        // Notify each admin
        foreach ($admins[$group->nid] as $admin) {
          $subject = _og_invite_link_mail_text('og_invite_admin_subject', $variables, $admin->language);
          $body = _og_invite_link_mail_text('og_invite_admin_body', $variables, $admin->language);
          notifications_lite_send($admin->uid, $subject, $body);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_user();
 */
function og_invite_link_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      // Remove all invitations for this user
      db_query("DELETE FROM {og_invite} WHERE uid = %d", $account->uid);
      break;
  }
}

/**
 * Implementation of hook_nodeapi();
 */
function og_invite_link_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      // Remove all invitations for this group
      if (og_is_group_type($node->type)) {
        db_query("DELETE FROM {og_invite} WHERE group_nid = %d", $node->nid);
      }
      break;
  }
}

/**
 * Generates a token (a hash) used on invite links
 *
 * @param object $invitation
 *   The invitation object
 *
 * @return
 *   A token string
 */
function og_invite_link_generate_token($invitation) {
  if (empty($invitation->uid) && !empty($invitation->mail)) {
    return md5(md5($invitation->invite_key) . md5($invitation->group_nid . '-' . $invitation->mail . '-' . $invitation->timestamp));
  }
  else {
    return md5(md5($invitation->invite_key) . md5($invitation->group_nid . '-' . $invitation->uid . '-' . $invitation->timestamp));
  }
}

/**
 * Send an invitation mail to a user for a group.
 *
 * @param $user
 *   A user object or user ID
 * @param object $group
 *   The group node object.
 * @param string $additional_message
 *   The additional message to be put in the mail.
 */
function og_invite_link_send_invite($user, $group, $additional_message = NULL) {
  // Load the user account, if necessary
  $account = is_numeric($user) ? user_load($user) : $user;

  // Make sure we have a valid user
  if (!is_object($account) || (!$account->uid && !variable_get('og_invite_link_invite_unregistered', FALSE)) && empty($account->mail) ) {
    return FALSE;
  }

  // Make sure we have a valid group
  if (!og_is_group_type($group->type)) {
    return FALSE;
  }

  // Create an invitation
  $invitation = og_invite_link_create_invitation($account, $group);

  // Send the mail
  $mail_params = array(
    'group' => $group,
    'account' => $account,
    'additional_message' => $additional_message,
    'invitation' => $invitation,
  );
  drupal_mail('og_invite_link', 'invite_to_group', $account->mail, user_preferred_language($account), $mail_params);

  // Store an entry in watchdog
  watchdog('og_invite_link', 'Group invite sent to !mail (user id: !user_id) for group !group', array('!mail' => $account->mail, '!user_id' => $account->uid, '!group' => check_plain($group->title)), WATCHDOG_INFO);
}

/**
 * Creates an invitation that is stored in the database
 *
 * @param $account
 *   The ID of the user being invited, or the user object
 * @param $group
 *   The ID of the group the user is being invited to, or the group object
 *
 * @return
 *   The invitation object, if sucessful, or FALSE, if not
 */
function og_invite_link_create_invitation($account, $group) {
  global $user;

  // Load the group, if needed
  $group = is_numeric($group) ? node_load($group) : $group;

  // Create the invitation
  $invitation = new stdClass();
  // Store the group id
  $invitation->group_nid = $group->nid;
  // Store the user id of the invited user
  $invitation->uid = is_object($account) ? $account->uid : $account;
  // Store the user id of the sender
  $invitation->sender = $user->uid;
  // Store the time of creation
  $invitation->timestamp = $_SERVER['REQUEST_TIME'];
  // Use user_password() to generate a random key
  $invitation->invite_key = user_password();
  // Generate the token
  $invitation->token = og_invite_link_generate_token($invitation);
  if (empty($account->uid)) {
    $invitation->mail = $account->mail;
  }
  // If the user sending the invite is the group admin
  // the invite is not moderated, meaning the invitee will
  // automatically be accepted regardless of the group type
  $invitation->moderated = og_is_group_admin($group, $user) ? 0 : 1;

  // Save it to the database
  $success = drupal_write_record('og_invite', $invitation);

  return $success ? $invitation : FALSE;
}

/**
 * Implementation of hook_cron();
 */
function og_invite_link_cron() {
  // Purge old pending invitations.
  if ($expiration_days = variable_get('og_invite_link_expiration', 30)) {
    db_query("DELETE FROM {og_invite} WHERE accepted_timestamp = 0 AND timestamp < %d", $_SERVER['REQUEST_TIME'] - ($expiration_days * 86400));
  }
}

/**
 * Load an invitation that matches a token
 *
 * @param $token
 *   The invitation token
 *
 * @return
 *   An invitation object
 */
function og_invite_link_get_invitation_by_token($token) {
  $sql = "SELECT * from {og_invite} WHERE token = '%s'";
  $invitation = db_fetch_object(db_query($sql, $token));
  return $invitation ? $invitation : FALSE;
}

/**
 * Checks if an user is already invited into a group.
 *
 * @param int $user_id
 *   The user id to be checked.
 * @param int $group_nid
 *   The group id to be checked.
 */
function og_invite_link_user_is_invited($user_id, $group_nid) {
  $sql = "SELECT uid FROM {og_invite} WHERE uid = %d AND group_nid = %d";
  $invitation = db_fetch_object(db_query($sql, $user_id, $group_nid));
  return $invitation ? TRUE : FALSE;
}

/**
 * Implementation of hook_action_info();
 *
 */
function og_invite_link_action_info() {
  $info['og_invite_link_invite_users_action'] = array(
    'type' => 'node',
    'description' => t('Invite users to groups'),
    'configurable' => TRUE,
    'hooks' => array(
      // is this ok?
      'any' => TRUE,
    ),
  );
  return $info;
}

/**
 * The action callback.
 *
 */
function og_invite_link_invite_users_action($node, $context) {
  static $processed;
  // Run only once the invitation process.
  // This is needed because the view bulk operations module invokes
  // the action for each selected row. We do not need this here, because
  // the data in the context contains all the selected rows and the invitees,
  // so we just invite them once.
  if (!isset($processed)) {
    $processed = TRUE;
    $result = og_invite_link_invite_users_to_groups($context);
    // Show to the user how many successful invites were sent, how many users
    // were already a member of one the selected groups and which users were invalid.
    // 1. Invalid users.
    $invalid = '';
    if (count($result['invalid'])) {
      $invalid = implode(', ', $result['invalid']);
    }
    // 2. Already in group users.
    $in_group = 0;
    if (count($result['in_group'])) {
      foreach ($result['in_group'] as $value) {
        $in_group += count($value);
      }
    }
    // 3. Succesful invites.
    $succesful = 0;
    if (count($result['invitees'])) {
      foreach ($result['invitees'] as $value) {
        $succesful += count($value);
      }
    }
    $message_to_display = t('Invitation results:');
    $messages[] = format_plural($succesful, '1 successful invitation sent.', '@count successful invitations sent.');
    if ($in_group) {
      $messages[] = format_plural($in_group, '1 user was already in one of the groups.', '@count users were already in one of the groups.');
    }
    if (!empty($invalid)) {
      $messages[] = t('The following invitees are not users: !users', array('!users' => $invalid));
    }
    $message_to_display .= theme('item_list', $messages);
    drupal_set_message($message_to_display);
  }
}

/**
 * The action configuration form.
 *
 */
function og_invite_link_invite_users_action_form($context) {
  // The action configuration form is actually the same form that
  // is used when inviting users on a group page.
  module_load_include('inc', 'og_invite_link', 'og_invite_link.pages');
  $groups = array();
  // Iterate through each selected node and load its details
  // so it can be passed as parameter to the invite form.
  // This only works with vbo.
  // @todo: make this not vbo dependent.
  foreach ($context['selection'] as $key => $value) {
    if ($value->nid) {
      $groups[$value->nid] = node_load($value->nid);
    }
  }
  $form = og_invite_link_invite_page_form(array(), $groups);
  unset($form['submit']);
  return $form;
}

/**
 * Validation handler for the configuration form.
 *
 */
function og_invite_link_invite_users_action_validate($form, &$form_state) {
  // Just call the normal validation handler of the invite page.
  module_load_include('inc', 'og_invite_link', 'og_invite_link.pages');
  og_invite_link_invite_page_form_validate($form, $form_state);
}

/**
 * Submit handler for the configuration form.
 *
 */
function og_invite_link_invite_users_action_submit($form, &$form_state) {
  // Prepare the data into the format that the action callback needs.
  return array(
    'groups' => $form_state['values']['groups'],
    'invitees' => $form_state['values']['invitees'],
    'additional_message' => $form_state['values']['additional_message'],
  );
}

/**
 * Helper function to invite users into groups.
 *
 * @param array $params
 *   An associative array that contains the following keys:
 *   - groups: An array with organic group nodes.
 *   - invitees: A comma separated string containing the names
 *               or email addresses of the users to invite
 *   - additional_message: An additional message to be appended
 *                         to the invitation message.
 *
 *  @return An associative array with the following keys:
 *   - invitees: An array with all the successfull invitations,
 *               grouped by node id.
 *   - in_group: An array with all the users that were invited,
 *               but are already in the group(s), grouped by node id.
 *   - invalid: An array with invalid names.
 */
function og_invite_link_invite_users_to_groups($params) {
  if (count($params['groups'])) {
    // Extract the additional message from the parameters.
    $message = filter_xss($params['additional_message']);
    // Extract the user names to send invites to
    $names = explode(',', $params['invitees']);
    // Track the valid invitees
    $invitees = array();
    // Track the invalid invitees
    $invalid = array();
    // Track the valid invitees that are already group members
    $in_group = array();

    // Attempt to load the users based on names, to determine which are real
    // users and which are not. We need to load each user individually instead
    // of using a single query because we need to determine which groups each
    // user belongs to in order to avoid inviting them to a group of theirs
    foreach ($names as $name) {
      // Trim and sanitize the name
      $name = trim(filter_xss(strip_tags($name)));

      // Make sure we have a name to invite after the filtering
      if (strlen($name) == 0) {
        continue;
      }

      // Attempt to load the user
      if (valid_email_address($name)) {
        // Load based on email address
        $account = user_load(array('mail' => $name));
      }
      else {
        // Load based on user name
        $account = user_load(array('name' => $name));  
      }
      
      // Check if we have a valid user object
      if (is_object($account)) {
        // Invalid if the user is inactive
        if (!$account->status) {
          $invalid[] = $name;
          continue; 
        }
      }
      // Check if we are allowed to invite non-users
      else if (variable_get('og_invite_link_invite_unregistered', 0)) {
        // Make sure we have a valid, non-banned email address
        if (valid_email_address($name) && !drupal_is_denied('mail', $name)) {
          // Build a user object
          $account = new stdClass;
          $account->uid = 0;
          $account->mail = $name;
        }
        else {
          $invalid[] = $name;
          continue; 
        }
      }
      // We have nothing valid
      else {
        $invalid[] = $name;
        continue; 
      }
      
      foreach ($params['groups'] as $key => $group) {
        if (!is_array($invitees[$group->nid])) {
          $invitees[$group->nid] = array();
        }
        if (!is_array($in_group[$group->nid])) {
          $in_group[$group->nid] = array();
        }
        // Check for duplicates
        if (isset($invitees[$group->nid][$account->uid]) || 
         isset($invitees[$group->nid][$account->mail]) || 
         isset($in_group[$group->nid][$account->uid])) {
          continue;
        }
        // See if the user is already a member
        // Don't use og_is_group_member() because it's horrible
        if (isset($account->og_groups[$group->nid])) {
          $in_group[$group->nid][$account->uid] = theme('username', $account);
        }
        else {
          // Invite the user
          og_invite_link_send_invite($account, $group, $message);
          if ($account->uid) {
            $invitees[$group->nid][$account->uid] = theme('username', $account);  
          }
          else {
            $invitees[$group->nid][$account->mail] = $account->mail; 
          }
          
        }
      }
    }
    return array('invitees' => $invitees, 'in_group' => $in_group, 'invalid' => $invalid);
  }
}

/**
 * Provide the text for invitation mail components
 *
 * @param $key
 *   The message key (site variable name)
 * @param $variables
 *   An array of variables for the message
 * @param $language
 *   The preferred language object
 *
 * @return
 *   A message string
 */
function _og_invite_link_mail_text($key, $variables = array(), $language = NULL) {
  $langcode = isset($language) ? (is_object($language) ? $language->language : $language) : NULL;

  // See if we have a variable set for this
  if ($message = variable_get($key, FALSE)) {
    return strtr($message, $variables);
  }
  // Provide defaults
  else {
    switch ($key) {
      case 'og_invite_user_subject':
      case 'og_invite_user_body':
        // Use OG's handler
        return _og_mail_text($key, $variables, $language);

      case 'og_invite_admin_subject':
        return t("Invitation sent out for the group '@group'", $variables, $langcode);

      case 'og_invite_admin_body':
        return t("A group member has sent out an invitation for the group, '@group'.\n\nSent to: @sent-to\nSent by: @sent-by\n\nAdditional message:\n@body", $variables, $langcode);
    }
  }
}

