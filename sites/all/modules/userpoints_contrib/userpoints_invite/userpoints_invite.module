<?php

//$Id: userpoints_invite.module,v 1.9.2.4 2009/08/08 03:59:10 kbahey Exp $

// Copyright 2005-2007 Khalid Baheyeldin http://2bits.com

define('USERPOINTS_INVITE_INVITE',                     'userpoints_invite_invite');
define('USERPOINTS_INVITE_REGISTER_INVITER',           'userpoints_invite_register_inviter');
define('USERPOINTS_INVITE_REGISTER_INVITEE',           'userpoints_invite_register_invitee');
define('USERPOINTS_INVITE_REGISTER_REMOVE_ON_DELETE',  'userpoints_invite_register_remove_on_delete');

function userpoints_invite_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/userpoints_invite':
      $output = t('A userpoints interface with the invite module.');
      break;
  }
  return $output;
}

function userpoints_invite_userpoints($op, $params = array()) {
  switch($op) {
    case 'setting':
      $group = 'invite';
      $form[$group] = array(
        '#type'        => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE,
        '#title'       => t('!Points for invite (requires the invite module)', userpoints_translation()),
      );

      $form[$group][USERPOINTS_INVITE_INVITE] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points for inviting a user', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_INVITE_INVITE, 0),
        '#size'          => 5,
        '#maxlength'     => 5,
      );

      $form[$group][USERPOINTS_INVITE_REGISTER_INVITER] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points awarded to inviter when invited user registers', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_INVITE_REGISTER_INVITER, 0),
        '#size'          => 5,
        '#maxlength'     => 5,
      );

      $form[$group][USERPOINTS_INVITE_REGISTER_INVITEE] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points awarded to invitee when invited user registers', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_INVITE_REGISTER_INVITEE, 0),
        '#size'          => 5,
        '#maxlength'     => 5,
      );

      $form[$group][USERPOINTS_INVITE_REGISTER_REMOVE_ON_DELETE] = array(
        '#type'          => 'checkbox',
        '#title'         => t('!Points issued to inviter to be removed when user is deleted?', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_INVITE_REGISTER_REMOVE_ON_DELETE, 0),
      );

      $form[$group]['userpoints_invite_tid'] = array(
        '#type'          => 'select',
        '#title'         => t('Category'),
        '#default_value' => variable_get(userpoints_invite_tid, 0),
        '#options'       => userpoints_get_categories(),
        '#description'   => t('Invites will be assigned to this category. You can modify what categories are available by modifying the <a href="!url">Userpoints taxonomy</a>.', 
          array('!url' => url('admin/content/taxonomy/'. variable_get(USERPOINTS_CATEGORY_DEFAULT_VID, '')))),
      );
      
      return $form;
  }
}

function userpoints_invite($op, $args) {
  switch($op) {
    case 'invite':
      $points = variable_get(USERPOINTS_INVITE_INVITE, 0);
      $params = array(
        'points'      => $points,
        'uid'         => $args['inviter']->uid,
        'operation'   => 'invite '.$op,
        'entity_id'   => $args['inviter']->uid,
        'entity_type' => 'user',
        'tid'         => variable_get('userpoints_invite_tid', 0),
        'reference'   => 'userpoints_invite'
      );
      userpoints_userpointsapi($params);
      break;
    case 'cancel':
      $points = -variable_get(USERPOINTS_INVITE_INVITE, 0);
      $params = array(
        'points'      => $points,
        'uid'         => $args['inviter']->uid,
        'operation'   => 'invite '.$op,
        'entity_id'   => $args['inviter']->uid,
        'entity_type' => 'user',
        'tid'         => variable_get('userpoints_invite_tid', 0),
        'reference'   => 'userpoints_invite'
      );
      userpoints_userpointsapi($params);
      break;
    case 'escalate':
      $op = 'register';
      $points = variable_get(USERPOINTS_INVITE_REGISTER_INVITER, 0);
      $params = array(
        'points'      => $points,
        'uid'         => $args['inviter']->uid,
        'operation'   => 'invite '.$op.' invited '.$args['invitee']->uid,
        'entity_id'   => $args['inviter']->uid,
        'entity_type' => 'user',
        'tid'         => variable_get('userpoints_invite_tid', 0),
        'reference'   => 'userpoints_invite'
      );
      userpoints_userpointsapi($params);
      $points = variable_get(USERPOINTS_INVITE_REGISTER_INVITEE, 0);
      $params = array(
        'points'      => $points,
        'uid'         => $args['invitee']->uid,
        'operation'   => 'invite '.$op. ' invited by '.$args['inviter']->uid,
        'entity_id'   => $args['invitee']->uid,
        'entity_type' => 'user',
        'tid'         => variable_get('userpoints_invite_tid', 0),
        'reference'   => 'userpoints_invite'
      );
      userpoints_userpointsapi($params);
      break;
  }
}

function userpoints_invite_user($op, &$edit, &$account, $category = NULL) {
  switch($op) {
    case 'delete':
      if (variable_get(USERPOINTS_INVITE_REGISTER_REMOVE_ON_DELETE, TRUE)) {
        $uid = db_result(db_query("SELECT uid FROM {userpoints_txn} WHERE operation = '%s' ORDER BY time_stamp DESC LIMIT 1", 'invite register invited '.$account->uid));
        if ($uid) {
          $params = array(
            'points'      => -(variable_get(USERPOINTS_INVITE_INVITE, 0) + variable_get(USERPOINTS_INVITE_REGISTER_INVITER, 0)),
            'uid'         => $uid,
            'operation'   => 'invited user '.$account->uid.' deleted',
            'entity_id'   => $uid,
            'entity_type' => 'user',
            'tid'         => variable_get('userpoints_invite_tid', 0),
            'reference'   => 'userpoints_invite'
          );
          userpoints_userpointsapi($params);
        }
      }
      break;
  }
}

